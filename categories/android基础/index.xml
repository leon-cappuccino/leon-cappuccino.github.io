<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android基础 on Leon Blog</title>
    <link>https://leon-cappuccino.github.io/categories/android%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Android基础 on Leon Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://leon-cappuccino.github.io/categories/android%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android本地数据存储</title>
      <link>https://leon-cappuccino.github.io/posts/android%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leon-cappuccino.github.io/posts/android%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid>
      <description>Android本地数据存储 SharedPreferences SharedPreferences是Android平台上一个轻量级的存储辅助类，用来保存应用的一些常用配置，SharedPreferences是使用键值对的方式来存储数据的
1.将数据存储到SharedPreferences中 （1）获得SharedPreferences.Editor对象 首先我们通过Activity类中的getSharedPreferences方法获取SharedPreferences对象，其中第一个参数为文件名称，第二个参数为操作模式，目前只有默认的MODE_PRIVATE可选，表示只有当前的应用程序才可以对这个SharedPreferences文件进行读写。
我们在之后操作中需要使用的是SharedPreferences.Editor对象，通过SharedPreferences对象的edit()方法得到。
 val editor = getSharedPreferences(&amp;#34;data&amp;#34;, Context.MODE_PRIVATE).edit() （2）向SharedPreferences.Editor对象中添加数据 通过使用对应数据类型的putxxx方法以键值对的方式向SharedPreferences.Editor对象中添加数据。
 editor.putString(&amp;#34;name&amp;#34;, &amp;#34;Tom&amp;#34;)  editor.putInt(&amp;#34;age&amp;#34;, 28)  editor.putBoolean(&amp;#34;married&amp;#34;, false) （3）调用apply()方法将添加的数据提交 editor.apply() 之后我们可以在对应项目的shared_prefs/目录下看到data.xml文件
2.从SharedPreferences中读取数据 读取数据比较简单，首先我们需要获取一个SharedPreferences对象，之后使用对应的getxxx方法就可以读取data.xml中的值
 val prefs = getSharedPreferences(&amp;#34;data&amp;#34;, Context.MODE_PRIVATE) //第二个参数表示如果获取失败默认返回值  val name = prefs.getString(&amp;#34;name&amp;#34;, &amp;#34;&amp;#34;)  val age = prefs.getInt(&amp;#34;age&amp;#34;, 0)  val married = prefs.getBoolean(&amp;#34;married&amp;#34;, false) SQLite SQLite是一款轻量级的关系型数据库，内置于Android，它的运算速度非常快，占用资源很少，支持标准的SQL语法，还遵循了数据库的ACID事务。
1.如何创建数据库？ Android提供了SQLiteOpenHelper帮助类来对SQLite进行创建和升级，SQLiteOpenHelper是一个抽象类，继承它之后需要重写它的两个抽象方法onCreate()和onUpgrade()。
（1）继承SQLiteOpenHelper 首先我们需要新建类来继承SQLiteOpenHelper，通过SQL语句创建数据库，为了可以执行SQL语句，我们需要借助onCreate中的参数SQLiteDatabase，该参数的方法execSQL(string sql)可以执行非SELECT或其他不返回数据的单个SQL语句。
class MyDatabaseHelper(val context: Context, name: String, version: Int) :  SQLiteOpenHelper(context, name, null, version) {  private val createBook = &amp;#34;create table Book (&amp;#34; +  &amp;#34; id integer primary key autoincrement,&amp;#34; +  &amp;#34;author text,&amp;#34; +  &amp;#34;price real,&amp;#34; +  &amp;#34;pages integer,&amp;#34; +  &amp;#34;name text)&amp;#34;  override fun onCreate(db: SQLiteDatabase) {  db.</description>
    </item>
    
    <item>
      <title>Jetpack</title>
      <link>https://leon-cappuccino.github.io/posts/jetpack/</link>
      <pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leon-cappuccino.github.io/posts/jetpack/</guid>
      <description>Jetpack Jetpack是一套组件库，使用 Jetpack 可以帮助我们在不同的 Android 版本和不同的设备上，实现行为一致的工作代码，换言之解决了由于Android版本或者设备不同的兼容性问题。
目前 Jetpack 一共有 85 个组件库，我们可以将这些组件分为好几类，在此我们只介绍一些比较重要的类别。
核心库：
   组件名称 说明     activity.* 用于activity相关   arch.core 架构组件辅助   core Android核心库   fragment* fragment工具包   annotation 注解   Customview 自定义view的辅助类   collection Android中为了优化内存设计的数据结构    架构组件：架构组件结合MVVM的架构设计，用于处理UI与业务逻辑。
   组件名称 说明     lifecycle* 最重要的组件之一，生命周期处理组件   room* SQL数据类相关   work* WorkManager，后台任务调度   databinding* 在xml中绑定view和model   navigation* 单activity多fragment导航处理框架   datastore Preference替代类，支持异步处理，更安全   savedstate 临时保存数据，保证用户数据不丢失   &amp;hellip; &amp;hellip;    UI组件：</description>
    </item>
    
    <item>
      <title>Android面试题之四大组件</title>
      <link>https://leon-cappuccino.github.io/posts/android%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leon-cappuccino.github.io/posts/android%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/</guid>
      <description>Android四大组件相关 一、Activity相关 1.介绍不同场景下的Activity生命周期变化过程？ (1)Activity正常启动 onCreate-&amp;gt;onStart-&amp;gt;onResume
(2)Activity启动另一个Activity 1)B完全挡住A A:onPause -&amp;gt; B:onCreate -&amp;gt; B:onStart -&amp;gt; B:onResume -&amp;gt; A:onSaveInstanceState-&amp;gt; A:onStop
如果我们在此时点击Back键，将依次执行B:onPause -&amp;gt; A:onRestart -&amp;gt; A:onStart -&amp;gt; A:onResume -&amp;gt; B:onStop -&amp;gt; B:onDestroy
2）B没有完全挡住A，如dialog A:onPause -&amp;gt; B:onCreate -&amp;gt; B:onStart -&amp;gt; B:onResume -&amp;gt; A:onSaveInstanceState
可以看到，相比完全挡住的情况，由于A可见，因此不会到onStop
如果我们此时点击Back键，将依次执行B:onPause -&amp;gt; A:``onResume -&amp;gt; B:onStop -&amp;gt; B:onDestroy`
如果我们此时点击home键，将依次执行B:onPause -&amp;gt; A:onStop-&amp;gt; B:onSaveInstanceState -&amp;gt; B:onStop，再将应用切到前台 A:onRestart -&amp;gt; A:onStart -&amp;gt; B:onRestart -&amp;gt; B:onStart -&amp;gt; B:onResume
注意以上的讨论前提是启动模式为standard。
(3)Activity按back键返回 onPause -&amp;gt; onStop -&amp;gt; onDestroy
(4)按home键返回到桌面 onPause -&amp;gt; onSaveInstanceState -&amp;gt; onStop</description>
    </item>
    
    <item>
      <title>自定义控件</title>
      <link>https://leon-cappuccino.github.io/posts/%E8%87%AA%E5%AE%9A%E4%B9%89view/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://leon-cappuccino.github.io/posts/%E8%87%AA%E5%AE%9A%E4%B9%89view/</guid>
      <description>一、自定义控件三大函数 自定义控件有三个很重要的函数，onMeasure、onLayout和onDraw，其中onMeasure用来测量自定义控件的高和宽，onLayout给出自定义控件的位置，onDraw最后根据控件大小和位置绘制自定义控件。其中onDraw是必须实现的函数，另外两个函数不是必须实现。
1.onMeasure 在绘制控件前必须要经历measure的过程，这个过程从最外层的PhoneWindow开始进行，phonewindow调用内部frameLayout的measure，frameLayout又调用内部view的onMeasure，依次类推，尤其是对于measure的过程，由于布局的控件可以抽象为一棵树，measure的过程将会是一种中序遍历。
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) widthMeasureSpec和heightMeasureSpec这两个值通常情况下都是由父视图经过计算后传递给子视图的。
（1）什么时候需要实现onMeasure 如果自定义控件的尺寸与父布局大小相同，不需要重写onMeasure，如果需要特定大小的自定义控件，就需要实现onMeasure。
（2）MeasureSpec MeasureSpec是一个类，封装了父布局传递给子布局的布局要求，MeasureSpec由size和mode组成。MeasureSpec转化成二进制是一个32位的值，其中前两位为mode，后30位为size。
1）specMode specMode一种有三种类型，EXACTLY、AT_MOST 和UNSPECIFIED。
MeasureSpec.AT_MOST = 2 MeasureSpec.EXACTLY = 1 MeasureSpec.UNSPECIFIED = 0 EXACTLY表示父元素决定自定义控件的确切大小，对应的是match_parent，当mode为EXACTLY，不需要设定尺寸，因为尺寸已经确定。
AT_MOST表示子元素至多达到指定大小的值，对应wrap_content,mode为AT_MOST就需要我们来设定尺寸。
UNSPECIFIED表示开发人员可以将视图按照自己的意愿设置成任意的大小，没有任何限制，一般不使用。
2）通过MeasureSpec获得相关值 通常我们需要通过MeasureSpec获得mode和size，通过mode的值来设定自定义控件的尺寸，因此获得这些值通过以下方式：
int measureWidth = MeasureSpec.getSize(widthMeasureSpec); int measureHeight = MeasureSpec.getSize(heightMeasureSpec); int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec); int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec); （3）使用方式 setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth: width, (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight: height); 2.onLayout @Override protected abstract void onLayout(boolean changed, int l, int t, int r, int b); onLayout将ViewGroup里的每一个子View放置在一定的位置，注意onLayout在ViewGroup中定义是抽象函数，继承ViewGroup来实现一个自定义布局就必须重写onLayout方法，ViewGroup的onMeasure并非必须重写的。</description>
    </item>
    
  </channel>
</rss>
